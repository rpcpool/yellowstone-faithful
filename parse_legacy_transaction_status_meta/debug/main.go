package main

import (
	"fmt"

	"github.com/davecgh/go-spew/spew"
	transaction_status_meta_serde_agave "github.com/rpcpool/yellowstone-faithful/parse_legacy_transaction_status_meta"
)

func main() {
	meta := []byte{
		0, 0, 0, 0, // result
		136, 19, 0, 0, 0, 0, 0, 0, // fee
		///////////////////////////
		21, 0, 0, 0, 0, 0, 0, 0, // len(prebalances) = 21 elements
		91, 47, 181, 16, 0, 0, 0, 0, // prebalances[0]
		128, 92, 102, 8, 0, 0, 0, 0, // prebalances[1]
		128, 132, 70, 0, 0, 0, 0, 0, // prebalances[2]
		192, 204, 54, 0, 0, 0, 0, 0, // prebalances[3]
		64, 105, 100, 1, 0, 0, 0, 0, // prebalances[4]
		0, 51, 219, 0, 0, 0, 0, 0, // prebalances[5]
		240, 29, 31, 0, 0, 0, 0, 0, // prebalances[6]
		240, 29, 31, 0, 0, 0, 0, 0, // prebalances[7]
		240, 29, 31, 0, 0, 0, 0, 0, // prebalances[8]
		240, 29, 31, 0, 0, 0, 0, 0, // prebalances[9]
		240, 29, 31, 0, 0, 0, 0, 0, // prebalances[10]
		96, 77, 22, 0, 0, 0, 0, 0, // prebalances[11]
		240, 29, 31, 0, 0, 0, 0, 0, // prebalances[12]
		128, 41, 218, 167, 1, 0, 0, 0, // prebalances[13]
		128, 236, 4, 7, 0, 0, 0, 0, // prebalances[14]
		0, 244, 101, 0, 0, 0, 0, 0, // prebalances[15]
		0, 0, 0, 0, 0, 0, 0, 0, // prebalances[16]
		0, 0, 0, 0, 0, 0, 0, 0, // prebalances[17]
		0, 97, 201, 92, 0, 0, 0, 0, // prebalances[18]
		128, 205, 171, 66, 0, 0, 0, 0, // prebalances[19]
		1, 0, 0, 0, 0, 0, 0, 0, // prebalances[20]
		/////////////////////////
		21, 0, 0, 0, 0, 0, 0, 0, // len(postbalances) = 21 elements
		211, 27, 181, 16, 0, 0, 0, 0, // postbalances[0]
		128, 92, 102, 8, 0, 0, 0, 0, // postbalances[1]
		128, 132, 70, 0, 0, 0, 0, 0, // postbalances[2]
		192, 204, 54, 0, 0, 0, 0, 0, // postbalances[3]
		64, 105, 100, 1, 0, 0, 0, 0, // postbalances[4]
		0, 51, 219, 0, 0, 0, 0, 0, // postbalances[5]
		240, 29, 31, 0, 0, 0, 0, 0, // postbalances[6]
		240, 29, 31, 0, 0, 0, 0, 0, // postbalances[7]
		240, 29, 31, 0, 0, 0, 0, 0, // postbalances[8]
		240, 29, 31, 0, 0, 0, 0, 0, // postbalances[9]
		240, 29, 31, 0, 0, 0, 0, 0, // postbalances[10]
		96, 77, 22, 0, 0, 0, 0, 0, // postbalances[11]
		240, 29, 31, 0, 0, 0, 0, 0, // postbalances[12]
		128, 41, 218, 167, 1, 0, 0, 0, // postbalances[13]
		128, 236, 4, 7, 0, 0, 0, 0, // postbalances[14]
		0, 244, 101, 0, 0, 0, 0, 0, // postbalances[15]
		0, 0, 0, 0, 0, 0, 0, 0, // postbalances[16]
		0, 0, 0, 0, 0, 0, 0, 0, // postbalances[17]
		0, 97, 201, 92, 0, 0, 0, 0, // postbalances[18]
		128, 205, 171, 66, 0, 0, 0, 0, // postbalances[19]
		1, 0, 0, 0, 0, 0, 0, 0, // postbalances[20]
		///////////////////
		1,                      // option(InnerInstructions) = true
		1, 0, 0, 0, 0, 0, 0, 0, // len(inner_instructions) = 1
		0,                      // inner_instructions[0].index = 0
		5, 0, 0, 0, 0, 0, 0, 0, // len(inner_instructions[0].instructions) = 5

		// inner_instructions[0].instructions[0] of 5
		13, // inner_instructions[0].instructions[0].program_id_index = 13
		3,  // len(inner_instructions[0].instructions[0].accounts) = 3 as short_vec
		////
		16, // .accounts[0] = 16
		1,  // .accounts[1] = 1
		14, // .accounts[2] = 14
		/////
		216, // len(inner_instructions[0].instructions[0].data) = 216
		1, 7, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 129, 137, 41, 103, 152, 239, 90, 192, 85, 3, 85, 33, 12, 66, 204, 64, 81, 60, 54, 92, 14, 166, 40, 165, 80, 75, 64, 140, 228, 244, 111, 90, 0, 93, 169, 95, 105, 104, 240, 99, 69, 237, 201, 8, 4, 169, 239, 118, 184, 50, 135, 44, 247, 199, 150, 96, 99, 101, 53, 203, 18, 248, 144, 243, 141, 80, 204, 205, 190, 130, 174, 197, 38, 209, 120, 223, 124, 201, 168, 51, 235, 186, 121, 144, 67, 113, 89, 247, 8, 31, 0, 115, 157, 248, 243, 227, 172, 250, 141, 35, 210, 46, 29, 177, 179, 48, 125, 190, 44, 254, 189, 74, 165, 160, 158, 71, 230, 43, 42, 170, 14, 89, 102, 101, 212, 169, 22, 98, 165, 134, 1, 0, 0, 0, 0, 0, 166, 170, 245, 0, 0, 0, 0, 0, 28, 60, 17, 0, 0, 0, 0, 0, 173, 118, 193, 21, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 178, 236, 34, 0, 0, 0, 152, 58, 0, 0, 0, 0, 0,
		0, // option(stack_height) = false

		// inner_instructions[0].instructions[1] of 5 ///////////////////////////////////////////////////////
		18, // inner_instructions[0].instructions[1].program_id_index = 18
		//
		10, // len(inner_instructions[0].instructions[1].accounts) = 10 as short_vec
		//
		3,  // accounts[0] = 3
		4,  // accounts[1] = 4
		16, // accounts[2] = 16
		6,  // accounts[3] = 6
		7,  // accounts[4] = 7
		8,  // accounts[5] = 8
		9,  // accounts[6] = 9
		17, // accounts[7] = 17
		19, // accounts[8] = 19
		12, // accounts[9] = 12

		5, // len(inner_instructions[0].instructions[1].data) = 5
		0, // data[0] = 0
		5, // data[1] = 5
		0, // data[2] = 0
		0, // data[3] = 0
		0, // data[4] = 0

		// inner_instructions[0].instructions[2] of 5 ///////////////////////////////////////////////////////
		19, // .program_id_index = 19
		3,  // len(inner_instructions[0].instructions[2].accounts) = 3 as short_vec
		6,  // .accounts[0] = 6
		8,  // .accounts[1] = 8
		17, // .accounts[2] = 17
		9, 3, 64, 51, 195, 72, 23, 0, 0, 0, 19, 3, 7, 9, 17, 9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 19, 3, 10, 11, 16, 9, 8, 155, 172, 193, 72, 23, 0, 0, 0, 1, 21, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 67, 97, 108, 108, 32, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 72, 107, 65, 68, 55, 97, 121, 55, 104, 117, 70, 76, 54, 90, 49, 86, 111, 90, 69, 86, 106, 120, 97, 104, 72, 70, 109, 51, 104, 119, 113, 78, 113, 109, 119, 75, 116, 75, 87, 66, 107, 83, 112, 69, 61, 0, 0, 0, 0, 0, 0, 0, 67, 97, 108, 108, 32, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 72, 107, 65, 68, 55, 97, 121, 55, 104, 117, 70, 76, 54, 90, 49, 86, 111, 90, 69, 86, 106, 120, 97, 104, 72, 70, 109, 51, 104, 119, 113, 78, 113, 109, 119, 75, 116, 75, 87, 66, 107, 83, 112, 69, 41, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 111, 110, 115, 117, 109, 101, 100, 32, 52, 52, 55, 49, 32, 111, 102, 32, 49, 55, 54, 53, 57, 51, 32, 117, 110, 105, 116, 115, 64, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 72, 107, 65, 68, 55, 97, 121, 55, 104, 117, 70, 76, 54, 90, 49, 86, 111, 90, 69, 86, 106, 120, 97, 104, 72, 70, 109, 51, 104, 119, 113, 78, 113, 109, 119, 75, 116, 75, 87, 66, 107, 83, 112, 69, 32, 115, 117, 99, 99, 101, 115, 115, 61, 0, 0, 0, 0, 0, 0, 0, 67, 97, 108, 108, 32, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 74, 52, 122, 100, 106, 83, 68, 56, 54, 74, 115, 85, 113, 110, 70, 49, 113, 80, 102, 81, 76, 105, 68, 57, 104, 104, 107, 67, 85, 57, 102, 82, 98, 85, 65, 74, 112, 57, 99, 70, 111, 85, 74, 74, 60, 0, 0, 0, 0, 0, 0, 0, 67, 97, 108, 108, 32, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 84, 111, 107, 101, 110, 107, 101, 103, 81, 102, 101, 90, 121, 105, 78, 119, 65, 74, 98, 78, 98, 71, 75, 80, 70, 88, 67, 87, 117, 66, 118, 102, 57, 83, 115, 54, 50, 51, 86, 81, 53, 68, 65, 34, 0, 0, 0, 0, 0, 0, 0, 80, 114, 111, 103, 114, 97, 109, 32, 108, 111, 103, 58, 32, 73, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 58, 32, 84, 114, 97, 110, 115, 102, 101, 114, 41, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 111, 110, 115, 117, 109, 101, 100, 32, 52, 55, 53, 57, 32, 111, 102, 32, 49, 53, 56, 56, 55, 51, 32, 117, 110, 105, 116, 115, 63, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 84, 111, 107, 101, 110, 107, 101, 103, 81, 102, 101, 90, 121, 105, 78, 119, 65, 74, 98, 78, 98, 71, 75, 80, 70, 88, 67, 87, 117, 66, 118, 102, 57, 83, 115, 54, 50, 51, 86, 81, 53, 68, 65, 32, 115, 117, 99, 99, 101, 115, 115, 60, 0, 0, 0, 0, 0, 0, 0, 67, 97, 108, 108, 32, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 84, 111, 107, 101, 110, 107, 101, 103, 81, 102, 101, 90, 121, 105, 78, 119, 65, 74, 98, 78, 98, 71, 75, 80, 70, 88, 67, 87, 117, 66, 118, 102, 57, 83, 115, 54, 50, 51, 86, 81, 53, 68, 65, 34, 0, 0, 0, 0, 0, 0, 0, 80, 114, 111, 103, 114, 97, 109, 32, 108, 111, 103, 58, 32, 73, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 58, 32, 84, 114, 97, 110, 115, 102, 101, 114, 41, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 111, 110, 115, 117, 109, 101, 100, 32, 52, 55, 53, 57, 32, 111, 102, 32, 49, 53, 50, 48, 54, 50, 32, 117, 110, 105, 116, 115, 63, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 84, 111, 107, 101, 110, 107, 101, 103, 81, 102, 101, 90, 121, 105, 78, 119, 65, 74, 98, 78, 98, 71, 75, 80, 70, 88, 67, 87, 117, 66, 118, 102, 57, 83, 115, 54, 50, 51, 86, 81, 53, 68, 65, 32, 115, 117, 99, 99, 101, 115, 115, 42, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 111, 110, 115, 117, 109, 101, 100, 32, 50, 51, 49, 55, 52, 32, 111, 102, 32, 49, 54, 57, 54, 55, 54, 32, 117, 110, 105, 116, 115, 64, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 74, 52, 122, 100, 106, 83, 68, 56, 54, 74, 115, 85, 113, 110, 70, 49, 113, 80, 102, 81, 76, 105, 68, 57, 104, 104, 107, 67, 85, 57, 102, 82, 98, 85, 65, 74, 112, 57, 99, 70, 111, 85, 74, 74, 32, 115, 117, 99, 99, 101, 115, 115, 60, 0, 0, 0, 0, 0, 0, 0, 67, 97, 108, 108, 32, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 84, 111, 107, 101, 110, 107, 101, 103, 81, 102, 101, 90, 121, 105, 78, 119, 65, 74, 98, 78, 98, 71, 75, 80, 70, 88, 67, 87, 117, 66, 118, 102, 57, 83, 115, 54, 50, 51, 86, 81, 53, 68, 65, 30, 0, 0, 0, 0, 0, 0, 0, 80, 114, 111, 103, 114, 97, 109, 32, 108, 111, 103, 58, 32, 73, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 58, 32, 66, 117, 114, 110, 41, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 111, 110, 115, 117, 109, 101, 100, 32, 52, 49, 51, 50, 32, 111, 102, 32, 49, 52, 52, 52, 50, 54, 32, 117, 110, 105, 116, 115, 63, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 84, 111, 107, 101, 110, 107, 101, 103, 81, 102, 101, 90, 121, 105, 78, 119, 65, 74, 98, 78, 98, 71, 75, 80, 70, 88, 67, 87, 117, 66, 118, 102, 57, 83, 115, 54, 50, 51, 86, 81, 53, 68, 65, 32, 115, 117, 99, 99, 101, 115, 115, 42, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 111, 110, 115, 117, 109, 101, 100, 32, 54, 48, 55, 54, 53, 32, 111, 102, 32, 50, 48, 48, 48, 48, 48, 32, 117, 110, 105, 116, 115, 64, 0, 0, 0, 0, 0, 0, 0, 66, 80, 70, 32, 112, 114, 111, 103, 114, 97, 109, 32, 72, 107, 65, 68, 55, 97, 121, 55, 104, 117, 70, 76, 54, 90, 49, 86, 111, 90, 69, 86, 106, 120, 97, 104, 72, 70, 109, 51, 104, 119, 113, 78, 113, 109, 119, 75, 116, 75, 87, 66, 107, 83, 112, 69, 32, 115, 117, 99, 99, 101, 115, 115,
	}
	parsed, err := transaction_status_meta_serde_agave.BincodeDeserializeStoredTransactionStatusMeta(meta)
	fmt.Println("---------------------------------------------------------------------")
	spew.Dump(parsed)
	if err != nil {
		panic(err)
	}
}

func appendAll(slices ...[]byte) []byte {
	var totalLen int
	for _, slice := range slices {
		totalLen += len(slice)
	}
	result := make([]byte, 0, totalLen)
	for _, slice := range slices {
		result = append(result, slice...)
	}
	return result
}
