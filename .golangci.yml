# golangci-lint configuration file
# Documentation: https://golangci-lint.run/usage/configuration/

run:
  # Timeout for analysis, e.g. 30s, 5m.
  timeout: 5m

  # Exit code when at least one issue was found.
  issues-exit-code: 1

  # Include test files or not.
  tests: true

  # List of build tags, comma separated.
  build-tags:
    - integration

  # Which dirs to skip: issues from them won't be reported.
  skip-dirs:
    - vendor
    - third_party
    - deprecated
    - .git

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"
    - ".*\\.gen\\.go$"

  # Allow multiple parallel golangci-lint instances running.
  allow-parallel-runners: true

  # Define the Go version limit.
  go: '1.24'

# Output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  format: colored-line-number

  # Print lines of code with issue.
  print-issued-lines: true

  # Print linter name in the end of issue text.
  print-linter-name: true

  # Make issues output unique by line.
  uniq-by-line: true

  # Add a prefix to the output file references.
  path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-results: true

# All available settings of specific linters
linters-settings:
  # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
  dogsled:
    max-blank-identifiers: 2

  # Tool for detection of long functions
  funlen:
    lines: 100
    statements: 50

  # Checks that no global variables exist
  gochecknoglobals:
    # A list of regexps to exclude global variables from checking.
    # Default: ["^defaultLogger$", "^logger$"]
    exclude-patterns:
      - "^defaultLogger$"
      - "^logger$"

  # Computes and checks the cognitive complexity of functions
  gocognit:
    # Minimal code complexity to report
    min-complexity: 15

  # Computes and checks the cyclomatic complexity of functions
  gocyclo:
    # Minimal code complexity to report
    min-complexity: 15

  # Check import statements are formatted according to the 'goimport' command
  goimports:
    # Put imports beginning with prefix after 3rd-party packages.
    local-prefixes: github.com/rpcpool/yellowstone-faithful

  # Checks that printf-like functions are named with `f` at the end
  gomnd:
    # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
    checks:
      - argument
      - case
      - condition
      - operation
      - return

  # Reports long lines
  lll:
    line-length: 120

  # Finds naked returns in functions greater than a specified function length
  nakedret:
    max-func-lines: 30

  # Finds slice declarations that could potentially be pre-allocated
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    simple: true
    range-loops: true
    for-loops: false

  # Checks whether Err of rows is checked successfully
  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx

  # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
  staticcheck:
    # Select the Go version to target. The default is '1.13'.
    go: "1.24"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  # Like the front-end of a Go compiler, parses and type-checks Go code
  typecheck:
    # Report type errors in Go code. This is equivalent to the Go compiler's default behavior.
    # Default: true
    report-type-errors: true

  # Reports unused function parameters
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    check-exported: false

  # Tool for detection of leading and trailing whitespace
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  # Settings for specific linters
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    check-type-assertions: true

    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    check-blank: false

    # List of functions to exclude from checking, where each entry is a single function to exclude.
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)

  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    enabled-checks:
      - nestingReduce
      - unnamedResult
      - ruleguard
      - truncateCmp

    # Which checks should be disabled; can't be combined with 'enabled-checks'. Default is empty.
    disabled-checks:
      - regexpMust
      - ifElseChain

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    enabled-tags:
      - diagnostic
      - style
      - performance

    disabled-tags:
      - experimental

  # Security-focused linter for Go code
  gosec:
    # To select a subset of rules to run.
    includes:
      - G401 # Detect the usage of DES, RC4, MD5 or SHA1
      - G501 # Import blacklist: crypto/md5
      - G502 # Import blacklist: crypto/des
      - G503 # Import blacklist: crypto/rc4
      - G504 # Import blacklist: net/http/cgi
      - G505 # Import blacklist: crypto/sha1

    # To specify a set of rules to explicitly exclude.
    excludes:
      - G204 # Subprocess launched with variable
      - G304 # File path provided as taint input

    # To specify the configuration of rules.
    config:
      G306: "0644"
      G101:
        pattern: "(?i)passwd|pass|password|pwd|secret|token|pw|apikey|bearer|cred"
        ignore_entropy: false
        entropy_threshold: "80.0"
        per_char_threshold: "3.0"
        truncate: "32"

  # Revive is a fast, configurable, extensible, flexible, and beautiful linter for Go
  revive:
    min-confidence: 0
    rules:
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id

  # Misspell finder
  misspell:
    # Correct spellings using locale preferences for US or UK.
    locale: US
    ignore-words:
      - someword

# List of enabled/disabled linters
linters:
  disable-all: true
  enable:
    # Enabled by default linters:
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused # Checks Go code for unused constants, variables, functions and types

    # Additional linters:
    - gofmt # Gofmt checks whether code was gofmt-ed
    - goimports # Check import statements are formatted according to the 'goimport' command
    - gocritic # Provides diagnostics that check for bugs, performance and style issues
    - gosec # Inspects source code for security problems
    - misspell # Finds commonly misspelled English words in comments
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - whitespace # Tool for detection of leading and trailing whitespace

    # Performance linters:
    - prealloc # Finds slice declarations that could potentially be pre-allocated

    # Style linters:
    - gochecknoglobals # check that no global variables exist
    - gocognit # Computes and checks the cognitive complexity of functions
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - godot # Check if comments end in a period
    - godox # Tool for detection of FIXME, TODO and other comment keywords
    - gomnd # An analyzer to detect magic numbers
    - gomodguard # Allow and block list linter for direct Go module dependencies
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end
    - lll # Reports long lines
    - nakedret # Finds naked returns in functions greater than a specified function length

    # Complexity linters:
    - funlen # Tool for detection of long functions
    - nestif # Reports deeply nested if statements

  # Disabled linters (can be enabled if needed):
  # - asasalint # check for pass []any as any in variadic func(...any)
  # - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
  # - bidichk # Checks for dangerous unicode character sequences
  # - bodyclose # checks whether HTTP response body is closed successfully
  # - containedctx # containedctx is a linter that detects struct contained context.Context field
  # - cyclop # checks function and package cyclomatic complexity
  # - decorder # check declaration order and count of types, constants, variables and functions
  # - depguard # Go linter that checks if package imports are in a list of acceptable packages
  # - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
  # - dupl # Tool for code clone detection
  # - durationcheck # check for two durations multiplied together
  # - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13
  # - execinquery # execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds
  # - exhaustive # check exhaustiveness of enum switch statements
  # - exhaustruct # Checks if all structure fields are initialized
  # - exportloopref # checks for pointers to enclosing loop variables
  # - forbidigo # Forbids identifiers
  # - forcetypeassert # finds forced type assertions
  # - goconst # Finds repeated strings that could be replaced by a constant
  # - goerr113 # Golang linter to check the errors handling expressions
  # - gofumpt # Gofumpt checks whether code was gofumpt-ed
  # - goheader # Checks is file header matches to pattern
  # - golint # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
  # - gopls # 
  # - gosimple # Linter for Go source code that specializes in simplifying a code
  # - gosmopolitan # Report certain i18n/l10n anti-patterns in your Go codebase
  # - grouper # An analyzer to analyze expression groups
  # - importas # Enforces consistent import aliases
  # - interfacebloat # A linter that checks the number of methods inside an interface
  # - interfacer # Linter that suggests narrower interface types
  # - loggercheck # (logrlint): Checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
  # - maintidx # maintidx measures the maintainability index of each function
  # - makezero # Finds slice declarations with non-zero initial length
  # - maligned # Tool to detect Go structs that would take less memory if their fields were sorted
  # - musttag # enforce field tags in (un)marshaled structs
  # - nilnil # Checks that there is no simultaneous return of `nil` error and an invalid value
  # - nlreturn # nlreturn checks for a new line before return and branch statements to increase code clarity
  # - noctx # noctx finds sending http request without context.Context
  # - nolintlint # Reports ill-formed or insufficient nolint directives
  # - nonamedreturns # Reports all named returns
  # - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL
  # - paralleltest # paralleltest detects missing usage of t.Parallel() method in your Go test
  # - predeclared # find code that shadows one of Go's predeclared identifiers
  # - promlinter # Check Prometheus metrics naming via promlint
  # - reassign # Checks that package variables are not reassigned
  # - rowserrcheck # checks whether Err of rows is checked successfully
  # - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed
  # - structcheck # Finds unused struct fields
  # - stylecheck # Stylecheck is a replacement for golint
  # - tagliatelle # Checks the struct tags
  # - tenv # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
  # - testableexamples # linter checks if examples are testable (have an expected output)
  # - testpackage # linter that makes you use a separate _test package
  # - thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
  # - tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
  # - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library
  # - varcheck # Finds unused global variables and constants
  # - varnamelen # checks that the length of a variable's name matches its scope
  # - wastedassign # wastedassign finds wasted assignment statements
  # - wrapcheck # Checks that errors returned from external packages are wrapped
  # - wsl # Whitespace Linter - Forces you to use empty lines!

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  exclude:
    # Default excludes from golangci-lint
    - "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*printf?|os\\.(Un)?Setenv). is not checked"
    - "func name will be used as test\\.Test.* by other packages, and that stutters; consider calling this"
    - "G104: Errors unhandled\\." # gosec
    - "G204: Subprocess launched with variable" # gosec
    - "G304: Potential file inclusion via variable" # gosec

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - lll
        - funlen
        - gocognit
        - unparam

    # Exclude some linters from running on example files.
    - path: example_.*\.go
      linters:
        - errcheck
        - gomnd

    # Exclude gosec from some directories
    - path: cmd/.*\.go
      linters:
        - gosec

    # Exclude specific gosec rules for test files
    - path: _test\.go
      text: "G101|G102|G103|G104|G106|G107|G108|G109|G110|G201|G202|G203|G204|G301|G302|G303|G304|G305|G306|G307|G401|G402|G403|G404|G501|G502|G503|G504|G505|G601"
      linters:
        - gosec

    # Ignore magic number detection in configuration files
    - path: config\.go
      linters:
        - gomnd

    # Ignore long lines in generated files
    - path: .*\.pb\.go
      linters:
        - lll

    # Ignore complexity in main packages
    - path: main\.go
      linters:
        - gocyclo
        - gocognit

    # Allow global variables in main package
    - path: main\.go
      linters:
        - gochecknoglobals

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  exclude-use-default: false

  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable.
  include:
    - EXC0002 # disable excluding of issues about comments from golint
    - EXC0003 # disable excluding of issues about comments from revive
    - EXC0004 # disable excluding of issues about comments from gocritic
    - EXC0005 # disable excluding of issues about comments from staticcheck
    - EXC0011 # disable excluding of issues about comments from stylecheck
    - EXC0012 # disable excluding of issues about comments from revive
    - EXC0013 # disable excluding of issues about comments from revive
    - EXC0014 # disable excluding of issues about comments from revive
    - EXC0015 # disable excluding of issues about comments from revive

  # Maximum issues count per one linter. Set to 0 to disable.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, e.g. `--new` or `--new-from-rev=HEAD~1`.
  # If there are no changes, then all files are analyzed.
  new: false

  # Show only new issues created after git revision `REV`
  # new-from-rev: REV

  # Show only new issues created in git patch with set file path
  # new-from-patch: path/to/patch/file

  # Fix found issues (if it's supported by the linter)
  fix: false

severity:
  # Default value is empty string.
  # Set the default severity for issues. If severity rules are defined and the issues
  # do not match or no severity is provided to the rule this will be the default
  # severity applied. Severities should match the supported severity names of the
  # selected out format.
  default-severity: error

  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false

  # Default value is empty list.
  # When a list of severity rules are provided, severity information will be added to lint
  # issues. Severity rules have the same filtering capability as exclude rules except you
  # are allowed to specify one matcher per severity rule.
  rules:
    - linters:
        - dupl
      severity: info
    - linters:
        - gocritic
      severity: info
    - linters:
        - lll
      severity: info
    - linters:
        - gomnd
      severity: info